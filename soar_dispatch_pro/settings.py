"""
Django settings for soar_dispatch_pro project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import ast

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "django-insecure-(2y4k^qnqwv52zi0$z6odb02*!r!j+jtym3x@(a1fz%@xtgg&i")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(os.getenv("IS_DEVELOPMENT", "True"))

# In Production we needs to comma seperated values. 
ALL_HOSTS = os.getenv("ALLOWED_HOSTS", ["*"])
if os.getenv("ALLOWED_HOSTS"):
    ALLOWED_HOSTS = ALL_HOSTS.split(",")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'soar_incident_dispatcher_app',
    'django_extensions', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'soar_dispatch_pro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'soar_dispatch_pro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.postgresql_psycopg2',
          'NAME': os.getenv("DB_NAME"),
          'USER': os.getenv("DB_USER"),
          'PASSWORD': os.getenv("DB_PASSWORD"),
          'HOST': os.getenv("DB_HOST"),
          'PORT': int(os.getenv("DB_PORT")),
      }
}
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static"
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Session Settings
SESSION_COOKIE_AGE = 300

# settings for ibm sso using openID Connect 1.0
SSO_REDIRECT_URL = os.getenv("SSO_REDIRECT_URL")
SSO_AUTHORIZE_URL = os.getenv("SSO_AUTHORIZE_URL")
SSO_TOKEN_URL = os.getenv("SSO_TOKEN_URL")
SSO_CLIENT_ID = os.getenv("SSO_CLIENT_ID")
SSO_CLIENT_SECRET = os.getenv("SSO_CLIENT_SECRET")
ST_MAP = {"A": "Active", "D": "Deactivated", "I": "Inactive", "P": "Pending activation", "R": "Password Reset Pending",
          "U": "unknown"}
# Resilient Instance Configurations
_resilient_conf = os.getenv("SOAR_CONFIG")
if _resilient_conf:
    _resilient_conf = ast.literal_eval(_resilient_conf)
else:
    _resilient_conf = {}
RES_CONFIG = _resilient_conf

"""
Example Resilient Configuration
RES_CONFIG = [
    {
      "key": "",  
      "sec": "",
      "host": "",
      "port": "",
      "org": "",
      "cafile": "false"
    },
    {
      "key": "",  
      "sec": "",
      "host": "",
      "port": "",
      "org": "",
      "cafile": "false"
    }
    ]
"""
